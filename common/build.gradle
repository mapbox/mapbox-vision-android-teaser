apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply from: "../gradle/utils.gradle"
apply from: "../gradle/ktlint.gradle"

android {
    buildToolsVersion build_tools_version
    compileSdkVersion compile_sdk_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api "androidx.appcompat:appcompat:$android_x_appcompat"
    api "androidx.constraintlayout:constraintlayout:$android_x_constraint_layout"
    api "androidx.core:core-ktx:$android_x_ktx"
    api "androidx.multidex:multidex:$android_x_multidex"

    if (gradle.ext.BUILD_CORE_FROM_SOURCE) {
        api project(path: ':Vision')
        api project(path: ':VisionAr')
        api project(path: ':VisionSafety')
    } else {
        api "com.mapbox.vision:mapbox-android-vision:$vision"
        api "com.mapbox.vision:mapbox-android-vision-ar:$vision"
        api "com.mapbox.vision:mapbox-android-vision-safety:$vision"
    }

    api('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true
    }

    ktlint "com.pinterest:ktlint:$ktlint_version"
}
